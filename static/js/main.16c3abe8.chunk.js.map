{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RA8BeA,MA1Bf,YAAqD,EAArCC,GAAsC,IAAnCC,EAAkC,EAAlCA,KAAKC,EAA6B,EAA7BA,MAAMC,EAAuB,EAAvBA,QAAQC,EAAe,EAAfA,OAAOC,EAAQ,EAARA,OACzC,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKA,UAAU,aAAaC,IAAOH,EAAQI,IAAMN,EAAOA,MAAOA,IAC/D,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACKD,EAAOI,KAAI,SAACC,EAAMC,GAAP,OACR,6BAAiBD,GAARC,QAGlB,qBAAIL,UAAU,iBAAd,UAAgCH,EAAQS,MAAM,EAAE,KAAhD,gBC4EAC,G,kNA7CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAIGC,IAAMC,IAAI,4DAJb,gBAGLJ,EAHK,EACJK,KACHA,KACEL,OAEL,EAAKM,SAAS,CAACN,SAAOD,WAAW,IALvB,2C,kEASVQ,KAAKN,c,+BAGE,IAAD,EACsBM,KAAKT,MAA1BC,EADD,EACCA,UAAWC,EADZ,EACYA,OAClB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACD,qBAAKT,UAAU,SAAf,SACA,sBAAMA,UAAU,eAAhB,0BAEC,qBAAKA,UAAU,SAAf,SACEU,EAAOP,KAAI,SAAAe,GAAK,OACjB,cAAC,EAAD,CAEExB,GAAIwB,EAAMxB,GACVC,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAMC,mBACdpB,OAAQmB,EAAMnB,QANTmB,EAAMxB,e,GA7BL0B,IAAMC,YCxCxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.16c3abe8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({id,year,title,summary,poster,genres}){\r\n    return (\r\n        <div className=\"movie\">\r\n            <img className=\"movie__img\" src = {poster} alt ={title} title={title}/>\r\n            <div className=\"movie__data\">\r\n                <h4 className=\"movie__title\">{title}</h4>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"movie__genres\">\r\n                    {genres.map((genre,index) =>(\r\n                        <li key={index}>{genre}</li>\r\n                    ))}\r\n                </ul>\r\n               <h4 className=\"movie__summary\">{summary.slice(0,180)}...</h4>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year:PropTypes.number.isRequired,\r\n    title:PropTypes.string.isRequired,\r\n    summary:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie; ","import axios from \"axios\";\nimport React from \"react\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n// import PropTypes from \"prop-types\";\n/*\n  JSX & PROPS\n  1. render는 한 개밖에 되지 않는다. 따라서 APP 안에서 모든 component정보를 처리하면 된다.\n  2. props특징이 있는데, 이는 component의 파라미터로 변수를 받게 되고, 해당 컴포넌트에 key - value 형식으로 데이터를 \n     저장 할 수 있다. 따라서, 해당 component에서 지정된 값으로 출력이 가능하다.\n\n    ※component의 첫 번째 글자는 upper(대문자) 를 사용한다.\n  \n  map구조를 통해 배열 구조를 각각 하나씩 접근하여 적용이 가능하다.\n  즉, playerInfo에 있는 정보들을 하나씩 분리하여, Info에 있는 파라미터에 접근 할 수 있도록 한다. \n  다만, react에서는 Info(component)들을 구분하지 못하므로, key = {element.id}의 형식으로 고유하게 구분 지어 줘야 에러가 나오지 않음.\n\n  porpTypes:\n    component에 사용되는 변수 혹은 데이터의 형태, 정보등을 확인하고, 검열이 가능하게 끔 제공하는 패키지.\n    제공되는 변수의 타입 (string,number,array....) 혹은 제공되는 array안에 어떤 정보가 있는지를 확인 할 수 있는 패키지임. \n*/\n\n/*\n  ※react에서 새로운 setState를 실행할 때마다, render 메서드가 새롭게 실행이 됨.\n  (render에서 실행된 event는 새로고침이 되지 않는다. 따라서 새롭게 실행을 해야한다.)\n\n  component LifeCycle:\n  1. Mounting: component가 최초 실행 되었을 때 (약간 안드로이드에서 attach or onCreate와 비슷)\n    1-1 constructor(생성자) : 최초 실행\n    1-2 render() : render 메서드 자동 실행\n    1-3 componentDidMount() : render 메서드 실행되고 나서 실행\n  2. Updating: 최초로 render 하지 않고, 앞선 예제처럼 setState를 통해 해당 class component에 변화가 주어졌을 때.\n    2-1 render() : render 메서드가 실행 될 때\n    2-2 componentDidUpadte(): Update 과정에서 render 메서드가 실행되고 나서 실행되는 메서드\n  3. UnMounting: component가 종료될 때 (ex 페이지 종료, state를 통한 페이지 교체)\n\n\n  handler와 같이 setTimeout 메서드를 이용해서 시간차 함수를 실행 시킬 수 있음.\n\n  영화 API 가져오는 순서\n  1. loading 이후 didMount에서 API 가져오는 구문 작성.\n    1-1 영화 API에서 가져오는게 좀 느리기 때문에, async + await을 통해 해당 정보를 받아오기 전 까지는 아무것도 다음 행동을 취하지 않도록 설정\n  2. 영화정보를 받아오면, state안에 movies라는 배열 안에 해당 정보 삽입 및 정보 띄우기\n    2-1 정보 띄울 때 Props를 통해 정보 거르기 한번 해줌. \n*/\n\nclass App extends React.Component{\n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n  getMovies = async() =>{\n    const{data:\n      {data:\n        {movies}}} \n         = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    this.setState({movies,isLoading: false});\n  }\n  \n  componentDidMount() {\n    this.getMovies();\n  }\n\n  render(){\n    const {isLoading, movies} = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading?(\n        <div className=\"loader\">\n        <span className=\"loader__text\">Loading...</span>\n      </div>):\n        (<div className=\"movies\">\n          {movies.map(movie=>(\n          <Movie \n            key={movie.id}\n            id={movie.id}\n            year={movie.year}\n            title={movie.title}\n            summary={movie.summary}\n            poster={movie.medium_cover_image}\n            genres={movie.genres}\n            />\n        ))}\n        </div>)  \n      }\n      </section>   \n        );\n    }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// react에서는 한 개의 컴포넌트만 랜더링 할 수 있음. 따라서, 많은 컴포넌트를 사용하고 싶다면,\n// App 안에서 여러가지 js 파일들을 적용해야 함.\n\nReactDOM.render(\n  <React.StrictMode> \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}